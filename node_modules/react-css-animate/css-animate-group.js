'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cssAnimate = require('./css-animate');

var _cssAnimate2 = _interopRequireDefault(_cssAnimate);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CSSAnimateGroup = function (_PureComponent) {
  (0, _inherits3.default)(CSSAnimateGroup, _PureComponent);

  function CSSAnimateGroup(props, context) {
    (0, _classCallCheck3.default)(this, CSSAnimateGroup);

    var _this = (0, _possibleConstructorReturn3.default)(this, _PureComponent.call(this, props, context));

    _this.state = {
      animating: false,
      minHeight: 0
    };

    _this.onAnimateLeaveStart = _this.onAnimateLeaveStart.bind(_this);
    _this.onAnimateLeaveEnd = _this.onAnimateLeaveEnd.bind(_this);
    _this.onAnimateEnterEnd = _this.onAnimateEnterEnd.bind(_this);
    _this.onAnimateEnterStart = _this.onAnimateEnterStart.bind(_this);
    _this.onAnimateEnterEnd = _this.onAnimateEnterEnd.bind(_this);

    _this.animatEnter = false;
    _this.animatLeave = false;
    return _this;
  }

  CSSAnimateGroup.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    // return (nextState.animating !== this.state.animating);
    return nextProps.children.key !== this.props.children.key || nextState.animating !== this.state.animating;
  };

  CSSAnimateGroup.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
    if (nextProps.children.key !== this.props.children.key) {
      if (this.refs.current) {
        nextState.minHeight = _reactDom2.default.findDOMNode(this.refs.current).clientHeight;
      }
      nextState.animating = true;
    }
  };

  CSSAnimateGroup.prototype.onAnimateEnterEnd = function onAnimateEnterEnd(event) {
    this.animatEnter = false;

    if (!this.animatLeave) {
      this.setState({
        animating: false,
        minHeight: this.props.autoHeight ? null : this.state.minHeight
      });
    } else if (this.props.autoHeight && this.refs.current) {
      this.setState({ minHeight: _reactDom2.default.findDOMNode(this.refs.current).clientHeight });
    }
  };

  CSSAnimateGroup.prototype.onAnimateLeaveEnd = function onAnimateLeaveEnd(event) {

    this.animatLeave = false;
    this.lastChildren = null;
    if (!this.animatEnter) {
      this.setState({
        animating: false,
        minHeight: this.props.autoHeight ? null : this.state.minHeight
      });
    }
  };

  CSSAnimateGroup.prototype.onAnimateEnterStart = function onAnimateEnterStart(event) {
    this.animatEnter = true;
    var nextState = {
      animating: true
    };
    if (this.props.autoHeight && this.refs.current) {
      nextState.minHeight = _reactDom2.default.findDOMNode(this.refs.current).clientHeight;
    }
    this.setState(nextState);
  };

  CSSAnimateGroup.prototype.onAnimateLeaveStart = function onAnimateLeaveStart(event) {
    this.animatLeave = true;
    if (!this.state.animating) {
      this.setState({
        animating: true
      });
    }
  };

  CSSAnimateGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.children.key !== this.props.children.key) {
      this.lastChildren = _react2.default.cloneElement(this.props.children);
    }
  };

  CSSAnimateGroup.prototype.renderLastChild = function renderLastChild() {
    if (this.lastChildren && this.lastChildren.key !== this.props.children.key) {
      var _props = this.props,
          tagName = _props.tagName,
          id = _props.id,
          className = _props.className,
          children = _props.children,
          style = _props.style,
          animationType = _props.animationType,
          autoHeight = _props.autoHeight,
          animateAppearName = _props.animateAppearName,
          animateAppearDuration = _props.animateAppearDuration,
          animateAppearDelay = _props.animateAppearDelay,
          onAnimateAppearStart = _props.onAnimateAppearStart,
          onAnimateAppearIteration = _props.onAnimateAppearIteration,
          onAnimateAppearEnd = _props.onAnimateAppearEnd,
          onAnimateEnterStart = _props.onAnimateEnterStart,
          onAnimateEnterIteration = _props.onAnimateEnterIteration,
          onAnimateEnterEnd = _props.onAnimateEnterEnd,
          props = (0, _objectWithoutProperties3.default)(_props, ['tagName', 'id', 'className', 'children', 'style', 'animationType', 'autoHeight', 'animateAppearName', 'animateAppearDuration', 'animateAppearDelay', 'onAnimateAppearStart', 'onAnimateAppearIteration', 'onAnimateAppearEnd', 'onAnimateEnterStart', 'onAnimateEnterIteration', 'onAnimateEnterEnd']);

      return _react2.default.createElement(
        _cssAnimate2.default,
        (0, _extends3.default)({ ref: 'last', key: this.lastChildren.key, animationType: animationType, animateEnter: false, animateLeave: true, remove: true, onAnimateLeaveStart: this.onAnimateLeaveStart, onAnimateLeaveEnd: this.onAnimateLeaveEnd }, props),
        this.lastChildren
      );
    }
  };

  CSSAnimateGroup.prototype.renderCurrentChild = function renderCurrentChild() {
    var _props2 = this.props,
        tagName = _props2.tagName,
        id = _props2.id,
        className = _props2.className,
        children = _props2.children,
        style = _props2.style,
        animationType = _props2.animationType,
        autoHeight = _props2.autoHeight,
        animateAppearName = _props2.animateAppearName,
        animateAppearDuration = _props2.animateAppearDuration,
        animateAppearDelay = _props2.animateAppearDelay,
        onAnimateAppearStart = _props2.onAnimateAppearStart,
        onAnimateAppearIteration = _props2.onAnimateAppearIteration,
        onAnimateAppearEnd = _props2.onAnimateAppearEnd,
        onAnimateLeaveStart = _props2.onAnimateLeaveStart,
        onAnimateLeaveEnd = _props2.onAnimateLeaveEnd,
        onAnimateLeaveIteration = _props2.onAnimateLeaveIteration,
        props = (0, _objectWithoutProperties3.default)(_props2, ['tagName', 'id', 'className', 'children', 'style', 'animationType', 'autoHeight', 'animateAppearName', 'animateAppearDuration', 'animateAppearDelay', 'onAnimateAppearStart', 'onAnimateAppearIteration', 'onAnimateAppearEnd', 'onAnimateLeaveStart', 'onAnimateLeaveEnd', 'onAnimateLeaveIteration']);

    return _react2.default.createElement(
      _cssAnimate2.default,
      (0, _extends3.default)({ ref: 'current', key: children.key, animationType: animationType, hideEnter: true, animateEnter: true, animateLeave: false, remove: false, onAnimateEnterStart: this.onAnimateEnterStart, onAnimateEnterEnd: this.onAnimateEnterEnd }, props),
      children
    );
  };

  CSSAnimateGroup.prototype.render = function render() {
    var _this2 = this;

    var _props3 = this.props,
        tagName = _props3.tagName,
        className = _props3.className,
        children = _props3.children,
        style = _props3.style,
        autoHeight = _props3.autoHeight,
        animationType = _props3.animationType,
        hideEnter = _props3.hideEnter,
        leaveAbsolute = _props3.leaveAbsolute,
        animateBaseName = _props3.animateBaseName,
        animateAppearName = _props3.animateAppearName,
        animateAppearDuration = _props3.animateAppearDuration,
        animateAppearDelay = _props3.animateAppearDelay,
        animateEnterName = _props3.animateEnterName,
        animateEnterDuration = _props3.animateEnterDuration,
        animateEnterDelay = _props3.animateEnterDelay,
        animateEnterTiming = _props3.animateEnterTiming,
        animateLeaveName = _props3.animateLeaveName,
        animateLeaveDuration = _props3.animateLeaveDuration,
        animateLeaveDelay = _props3.animateLeaveDelay,
        animateLeaveTiming = _props3.animateLeaveTiming,
        onAnimationStart = _props3.onAnimationStart,
        onAnimationEnd = _props3.onAnimationEnd,
        onAnimateAppearStart = _props3.onAnimateAppearStart,
        onAnimateAppearIteration = _props3.onAnimateAppearIteration,
        onAnimateAppearEnd = _props3.onAnimateAppearEnd,
        onAnimateEnterStart = _props3.onAnimateEnterStart,
        onAnimateEnterIteration = _props3.onAnimateEnterIteration,
        onAnimateEnterEnd = _props3.onAnimateEnterEnd,
        onAnimateLeaveStart = _props3.onAnimateLeaveStart,
        onAnimateLeaveEnd = _props3.onAnimateLeaveEnd,
        onAnimateLeaveIteration = _props3.onAnimateLeaveIteration,
        props = (0, _objectWithoutProperties3.default)(_props3, ['tagName', 'className', 'children', 'style', 'autoHeight', 'animationType', 'hideEnter', 'leaveAbsolute', 'animateBaseName', 'animateAppearName', 'animateAppearDuration', 'animateAppearDelay', 'animateEnterName', 'animateEnterDuration', 'animateEnterDelay', 'animateEnterTiming', 'animateLeaveName', 'animateLeaveDuration', 'animateLeaveDelay', 'animateLeaveTiming', 'onAnimationStart', 'onAnimationEnd', 'onAnimateAppearStart', 'onAnimateAppearIteration', 'onAnimateAppearEnd', 'onAnimateEnterStart', 'onAnimateEnterIteration', 'onAnimateEnterEnd', 'onAnimateLeaveStart', 'onAnimateLeaveEnd', 'onAnimateLeaveIteration']);

    var Comp = tagName;
    var s = (0, _extends3.default)({}, style);

    if (autoHeight) {
      s.minHeight = this.state.minHeight === null ? null : this.state.minHeight + 'px';
    }

    return _react2.default.createElement(tagName, (0, _extends3.default)({
      ref: function ref(element) {
        _this2.element = element;
      },
      className: (0, _classnames2.default)(className, 'css-animation-group'),
      style: s
    }, props), [this.renderLastChild(), this.renderCurrentChild()]);
  };

  return CSSAnimateGroup;
}(_react.PureComponent);

/*
<CSSAnimationGroup
  ref="main"
  tagName="main"
  id="main"
  animateEnterName="fadeIn"
  animateEnterDelay="190ms"
  animateLeaveName="zoomOut"
  className="main-content">
  {React.cloneElement(this.props.children, {
    key: this.props.location.pathname
  })}
</CSSAnimationGroup>
 */


CSSAnimateGroup.propTypes = {
  tagName: _react.PropTypes.string,

  animationType: _react2.default.PropTypes.string,

  autoHeight: _react.PropTypes.bool,
  leaveAbsolute: _react.PropTypes.bool,
  animateBaseName: _react.PropTypes.string,

  animateAppearName: _react.PropTypes.string,
  animateAppearDuration: _react.PropTypes.string,
  animateAppearDelay: _react.PropTypes.string,

  animateEnterName: _react.PropTypes.string,
  animateEnterDuration: _react.PropTypes.string,
  animateEnterDelay: _react.PropTypes.string,
  animateEnterTiming: _react.PropTypes.string,
  hideEnter: _react.PropTypes.bool,

  animateLeaveName: _react.PropTypes.string,
  animateLeaveDuration: _react.PropTypes.string,
  animateLeaveDelay: _react.PropTypes.string,
  animateLeaveTiming: _react.PropTypes.string,

  onAnimationStart: _react.PropTypes.func,
  onAnimationEnd: _react.PropTypes.func,

  onAnimateAppearStart: _react.PropTypes.func,
  onAnimateAppearIteration: _react.PropTypes.func,
  onAnimateAppearEnd: _react.PropTypes.func,

  onAnimateEnterStart: _react.PropTypes.func,
  onAnimateEnterIteration: _react.PropTypes.func,
  onAnimateEnterEnd: _react.PropTypes.func,

  onAnimateLeaveStart: _react.PropTypes.func,
  onAnimateLeaveEnd: _react.PropTypes.func,
  onAnimateLeaveIteration: _react.PropTypes.func
};
CSSAnimateGroup.defaultProps = {
  animationType: _cssAnimate2.default.ANIATION_TYPE_ANIMATION,
  style: { position: 'relative' },
  tagName: 'div',
  hideEnter: false,
  autoHeight: true,
  leaveAbsolute: true,
  animateBaseName: 'animated',
  animateAppearName: 'fadeIn',
  animateEnterName: 'fadeIn',
  animateLeaveName: 'fadeOut'
};
exports.default = CSSAnimateGroup;
module.exports = exports['default'];