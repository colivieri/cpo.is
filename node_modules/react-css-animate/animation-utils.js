'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inlineStylePrefixer = require('inline-style-prefixer');

var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixer = null;

var animationEventTypes = {
  'WebkitAnimation': {
    end: 'webkitAnimationEnd',
    start: 'webkitAnimationStart',
    iteration: 'webkitAnimationIteration'
  },
  'OAnimation': {
    end: 'oanimationend',
    start: 'oanimationstart',
    iteration: 'oanimationiteration'
  },
  'msAnimation': {
    end: 'MSAnimationEnd',
    start: 'MSAnimationStart',
    iteration: 'MSAnimationIteration'
  },
  'animation': {
    end: 'animationend',
    start: 'animationstart',
    iteration: 'animationiteration'
  }
};

var transitionEndEventType = {
  'transition': 'transitionend',
  'OTransition': 'otransitionend',
  'MozTransition': 'transitionend',
  'WebkitTransition': 'webkitTransitionEnd'
};

var AnimationUtils = function () {
  function AnimationUtils() {
    (0, _classCallCheck3.default)(this, AnimationUtils);

    this.animationName = 'animation';
    this.transitionName = 'transition';
    this.initialized = false;
  }

  AnimationUtils.prototype.init = function init() {
    if (!this.initialized) {
      if (typeof window !== 'undefined') {
        prefixer = new _inlineStylePrefixer2.default();
        this.initialized = true;
        this.animationName = Object.keys(prefixer.prefix({ 'animation': '' }))[0];
        this.transitionName = Object.keys(prefixer.prefix({ 'transition': '' }))[0];
      }
    }
  };

  AnimationUtils.prototype.prefix = function prefix(style) {
    if (prefixer) {
      return prefixer.prefix(style);
    }
    console.warn('no prefixer');
    return style;
  };

  AnimationUtils.prototype.offAnimationEnd = function offAnimationEnd(element, listener) {
    var type = this.animationEventTypes.end;
    if (type && element.removeEventListener) {
      return element.removeEventListener(type, listener);
    }
  };

  AnimationUtils.prototype.onAnimationEnd = function onAnimationEnd(element, listener) {
    var type = this.animationEventTypes.end;
    if (type && element.addEventListener) {
      return element.addEventListener(type, listener, true);
    }
  };

  AnimationUtils.prototype.offAnimationStart = function offAnimationStart(element, listener) {
    var type = this.animationEventTypes.start;
    if (type && element.removeEventListener) {
      return element.removeEventListener(type, listener);
    }
  };

  AnimationUtils.prototype.onAnimationStart = function onAnimationStart(element, listener) {
    var type = this.animationEventTypes.start;
    if (type && element.addEventListener) {
      return element.addEventListener(type, listener, true);
    }
  };

  AnimationUtils.prototype.offTransitionEnd = function offTransitionEnd(element, listener) {
    var type = this.transitionEndEventType;
    if (type && element.removeEventListener) {
      return element.removeEventListener(type, listener);
    }
  };

  AnimationUtils.prototype.onTransitionEnd = function onTransitionEnd(element, listener) {
    var type = this.transitionEndEventType;
    if (type && element.addEventListener) {
      return element.addEventListener(type, listener, true);
    }
  };

  AnimationUtils.prototype.offTweenEnd = function offTweenEnd(element, listener) {
    this.offAnimationEnd(element, listener);
    this.offTransitionEnd(element, listener);
  };

  AnimationUtils.prototype.onTweenEnd = function onTweenEnd(element, listener) {
    this.onAnimationEnd(element, listener);
    this.onTransitionEnd(element, listener);
  };

  (0, _createClass3.default)(AnimationUtils, [{
    key: 'isIE9',
    get: function get() {
      if (typeof document !== 'undefined') {
        return document.documentMode <= 9;
      }
      return false;
    }
  }, {
    key: 'animationEventTypes',
    get: function get() {
      return animationEventTypes[this.animationName];
    }
  }, {
    key: 'transitionEndEventType',
    get: function get() {
      return transitionEndEventType[this.transitionName];
    }
  }]);
  return AnimationUtils;
}();

exports.default = new AnimationUtils();
module.exports = exports['default'];